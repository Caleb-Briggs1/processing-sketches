
class map {//class to draw the background, **not essential to know for the game** (except for the food functions)
  float[][] map = {{0,0,32,32,0,0,0,4,0},{0,32,32,32,0,0,0,4,0},{0,64,32,32,0,0,0,4,0},{0,96,32,32,0,0,0,4,0},{0,128,32,32,0,0,0,4,0},{0,160,32,32,0,0,0,4,0},{0,192,32,32,0,0,0,4,0},{0,224,32,32,0,0,0,4,0},{0,256,32,32,0,0,0,4,0},{0,288,32,32,0,0,0,4,0},{0,320,32,32,0,0,0,4,0},{0,352,32,32,0,0,0,4,0},{0,384,32,32,0,0,0,4,0},{0,416,32,32,0,0,0,4,0},{0,448,32,32,0,0,0,4,0},{0,480,32,32,0,0,0,4,0},{0,512,32,32,0,0,0,4,0},{0,544,32,32,0,0,0,4,0},{32,0,32,32,0,0,0,4,0},{32,32,32,32,0,0,0,4,0},{32,64,32,32,0,0,0,4,0},{32,96,32,32,0,0,0,4,0},{32,128,32,32,0,0,0,4,0},{32,160,32,32,0,0,0,4,0},{32,192,32,32,0,0,0,4,0},{32,224,32,32,0,0,0,4,0},{32,256,32,32,0,0,0,4,0},{32,288,32,32,0,0,0,4,0},{32,320,32,32,0,0,0,4,0},{32,352,32,32,0,0,0,4,0},{32,384,32,32,0,0,0,4,0},{32,416,32,32,0,0,0,4,0},{32,448,32,32,0,0,0,4,0},{32,480,32,32,0,0,0,4,0},{32,512,32,32,0,0,0,4,0},{32,544,32,32,0,0,0,4,0},{64,0,32,32,0,0,0,4,0},{64,32,32,32,0,0,0,4,0},{64,64,32,32,0,0,0,4,0},{64,96,32,32,0,0,0,4,0},{64,128,32,32,0,0,0,4,0},{64,160,32,32,0,0,0,4,0},{64,192,32,32,0,0,0,4,0},{64,224,32,32,0,0,0,4,0},{64,256,32,32,0,0,0,4,0},{64,288,32,32,0,0,0,4,0},{64,320,32,32,0,0,0,4,0},{64,352,32,32,0,0,0,4,0},{64,384,32,32,0,0,0,4,0},{64,416,32,32,0,0,0,4,0},{64,448,32,32,0,0,0,4,0},{64,480,32,32,0,0,0,4,0},{64,512,32,32,0,0,0,4,0},{64,544,32,32,0,0,0,4,0},{96,0,32,32,0,0,0,4,0},{96,32,32,32,0,0,0,4,0},{96,64,32,32,0,0,0,4,0},{96,96,32,32,0,0,0,4,0},{96,128,32,32,0,0,0,4,0},{96,160,32,32,0,0,0,4,0},{96,192,32,32,0,0,0,4,0},{96,224,32,32,0,0,0,4,0},{96,256,32,32,0,0,0,4,0},{96,288,32,32,0,0,0,4,0},{96,320,32,32,0,0,0,4,0},{96,352,32,32,0,0,0,4,0},{96,384,32,32,0,0,0,4,0},{96,416,32,32,0,0,0,4,0},{96,448,32,32,0,0,0,4,0},{96,480,32,32,0,0,0,4,0},{96,512,32,32,0,0,0,4,0},{96,544,32,32,0,0,0,4,0},{128,0,32,32,0,0,0,4,0},{128,32,32,32,0,0,0,4,0},{128,64,32,32,0,0,0,4,0},{128,96,32,32,0,0,0,4,0},{128,128,32,32,0,0,0,4,0},{128,160,32,32,0,0,0,4,0},{128,192,32,32,0,0,0,4,0},{128,224,32,32,0,0,0,4,0},{128,256,32,32,0,0,0,4,0},{128,288,32,32,0,0,0,4,0},{128,320,32,32,0,0,0,4,0},{128,352,32,32,0,0,0,4,0},{128,384,32,32,0,0,0,4,0},{128,416,32,32,0,0,0,4,0},{128,448,32,32,0,0,0,4,0},{128,480,32,32,0,0,0,4,0},{128,512,32,32,0,0,0,4,0},{128,544,32,32,0,0,0,4,0},{160,0,32,32,0,0,0,4,0},{160,32,32,32,0,0,0,4,0},{160,64,32,32,0,0,0,4,0},{160,96,32,32,0,0,0,4,0},{160,128,32,32,0,0,0,4,0},{160,160,32,32,0,0,0,4,0},{160,192,32,32,0,0,0,4,0},{160,224,32,32,0,0,0,4,0},{160,256,32,32,0,0,0,4,0},{160,288,32,32,0,0,0,4,0},{160,320,32,32,0,0,0,4,0},{160,352,32,32,0,0,0,4,0},{160,384,32,32,0,0,0,4,0},{160,416,32,32,0,0,0,4,0},{160,448,32,32,0,0,0,4,0},{160,480,32,32,0,0,0,4,0},{160,512,32,32,0,0,0,4,0},{160,544,32,32,0,0,0,4,0},{192,0,32,32,0,0,0,4,0},{192,32,32,32,0,0,0,4,0},{192,64,32,32,0,0,0,4,0},{192,96,32,32,0,0,0,4,0},{192,128,32,32,0,0,0,4,0},{192,160,32,32,0,0,0,4,0},{192,192,32,32,0,0,0,4,0},{192,224,32,32,0,0,0,4,0},{192,256,32,32,0,0,0,4,0},{192,288,32,32,0,0,0,4,0},{192,320,32,32,0,0,0,4,0},{192,352,32,32,0,0,0,4,0},{192,384,32,32,0,0,0,4,0},{192,416,32,32,0,0,0,4,0},{192,448,32,32,0,0,0,4,0},{192,480,32,32,0,0,0,4,0},{192,512,32,32,0,0,0,4,0},{192,544,32,32,0,0,0,4,0},{224,0,32,32,0,0,0,4,0},{224,32,32,32,0,0,0,4,0},{224,64,32,32,0,0,0,4,0},{224,96,32,32,0,0,0,4,0},{224,128,32,32,0,0,0,4,0},{224,160,32,32,0,0,0,4,0},{224,192,32,32,0,0,0,4,0},{224,224,32,32,0,0,0,4,0},{224,256,32,32,0,0,0,4,0},{224,288,32,32,0,0,0,4,0},{224,320,32,32,0,0,0,4,0},{224,352,32,32,0,0,0,4,0},{224,384,32,32,0,0,0,4,0},{224,416,32,32,0,0,0,4,0},{224,448,32,32,0,0,0,4,0},{224,480,32,32,0,0,0,4,0},{224,512,32,32,0,0,0,4,0},{224,544,32,32,0,0,0,4,0},{256,0,32,32,0,0,0,4,0},{256,32,32,32,0,0,0,4,0},{256,64,32,32,0,0,0,4,0},{256,96,32,32,0,0,0,4,0},{256,128,32,32,0,0,0,4,0},{256,160,32,32,0,0,0,4,0},{256,192,32,32,0,0,0,4,0},{256,224,32,32,0,0,0,4,0},{256,256,32,32,0,0,0,4,0},{256,288,32,32,0,0,0,4,0},{256,320,32,32,0,0,0,4,0},{256,352,32,32,0,0,0,4,0},{256,384,32,32,0,0,0,4,0},{256,416,32,32,0,0,0,4,0},{256,448,32,32,0,0,0,4,0},{256,480,32,32,0,0,0,4,0},{256,512,32,32,0,0,0,4,0},{256,544,32,32,0,0,0,4,0},{288,0,32,32,0,0,0,4,0},{288,32,32,32,0,0,0,4,0},{288,64,32,32,0,0,0,4,0},{288,96,32,32,0,0,0,4,0},{288,128,32,32,0,0,0,4,0},{288,160,32,32,0,0,0,4,0},{288,192,32,32,0,0,0,4,0},{288,224,32,32,0,0,0,4,0},{288,256,32,32,0,0,0,4,0},{288,288,32,32,0,0,0,4,0},{288,320,32,32,0,0,0,4,0},{288,352,32,32,0,0,0,4,0},{288,384,32,32,0,0,0,4,0},{288,416,32,32,0,0,0,4,0},{288,448,32,32,0,0,0,4,0},{288,480,32,32,0,0,0,4,0},{288,512,32,32,0,0,0,4,0},{288,544,32,32,0,0,0,4,0},{320,0,32,32,0,0,0,4,0},{320,32,32,32,0,0,0,4,0},{320,64,32,32,0,0,0,4,0},{320,96,32,32,0,0,0,4,0},{320,128,32,32,0,0,0,4,0},{320,160,32,32,0,0,0,4,0},{320,192,32,32,0,0,0,4,0},{320,224,32,32,0,0,0,4,0},{320,256,32,32,0,0,0,4,0},{320,288,32,32,0,0,0,4,0},{320,320,32,32,0,0,0,4,0},{320,352,32,32,0,0,0,4,0},{320,384,32,32,0,0,0,4,0},{320,416,32,32,0,0,0,4,0},{320,448,32,32,0,0,0,4,0},{320,480,32,32,0,0,0,4,0},{320,512,32,32,0,0,0,4,0},{320,544,32,32,0,0,0,4,0},{352,0,32,32,0,0,0,4,0},{352,32,32,32,0,0,0,4,0},{352,64,32,32,0,0,0,4,0},{352,96,32,32,0,0,0,4,0},{352,128,32,32,0,0,0,4,0},{352,160,32,32,0,0,0,4,0},{352,192,32,32,0,0,0,4,0},{352,224,32,32,0,0,0,4,0},{352,256,32,32,0,0,0,4,0},{352,288,32,32,0,0,0,4,0},{352,320,32,32,0,0,0,4,0},{352,352,32,32,0,0,0,4,0},{352,384,32,32,0,0,0,4,0},{352,416,32,32,0,0,0,4,0},{352,448,32,32,0,0,0,4,0},{352,480,32,32,0,0,0,4,0},{352,512,32,32,0,0,0,4,0},{352,544,32,32,0,0,0,4,0},{384,0,32,32,0,0,0,4,0},{384,32,32,32,0,0,0,4,0},{384,64,32,32,0,0,0,4,0},{384,96,32,32,0,0,0,4,0},{384,128,32,32,0,0,0,4,0},{384,160,32,32,0,0,0,4,0},{384,192,32,32,0,0,0,4,0},{384,224,32,32,0,0,0,4,0},{384,256,32,32,0,0,0,4,0},{384,288,32,32,0,0,0,4,0},{384,320,32,32,0,0,0,4,0},{384,352,32,32,0,0,0,4,0},{384,384,32,32,0,0,0,4,0},{384,416,32,32,0,0,0,4,0},{384,448,32,32,0,0,0,4,0},{384,480,32,32,0,0,0,4,0},{384,512,32,32,0,0,0,4,0},{384,544,32,32,0,0,0,4,0},{416,0,32,32,0,0,0,4,0},{416,32,32,32,0,0,0,4,0},{416,64,32,32,0,0,0,4,0},{416,96,32,32,0,0,0,4,0},{416,128,32,32,0,0,0,4,0},{416,160,32,32,0,0,0,4,0},{416,192,32,32,0,0,0,4,0},{416,224,32,32,0,0,0,4,0},{416,256,32,32,0,0,0,4,0},{416,288,32,32,0,0,0,4,0},{416,320,32,32,0,0,0,4,0},{416,352,32,32,0,0,0,4,0},{416,384,32,32,0,0,0,4,0},{416,416,32,32,0,0,0,4,0},{416,448,32,32,0,0,0,4,0},{416,480,32,32,0,0,0,4,0},{416,512,32,32,0,0,0,4,0},{416,544,32,32,0,0,0,4,0},{448,0,32,32,0,0,0,4,0},{448,32,32,32,0,0,0,4,0},{448,64,32,32,0,0,0,4,0},{448,96,32,32,0,0,0,4,0},{448,128,32,32,0,0,0,4,0},{448,160,32,32,0,0,0,4,0},{448,192,32,32,0,0,0,4,0},{448,224,32,32,0,0,0,4,0},{448,256,32,32,0,0,0,4,0},{448,288,32,32,0,0,0,4,0},{448,320,32,32,0,0,0,4,0},{448,352,32,32,0,0,0,4,0},{448,384,32,32,0,0,0,4,0},{448,416,32,32,0,0,0,4,0},{448,448,32,32,0,0,0,4,0},{448,480,32,32,0,0,0,4,0},{448,512,32,32,0,0,0,4,0},{448,544,32,32,0,0,0,4,0},{480,0,32,32,0,0,0,4,0},{480,32,32,32,0,0,0,4,0},{480,64,32,32,0,0,0,4,0},{480,96,32,32,0,0,0,4,0},{480,128,32,32,0,0,0,4,0},{480,160,32,32,0,0,0,4,0},{480,192,32,32,0,0,0,4,0},{480,224,32,32,0,0,0,4,0},{480,256,32,32,0,0,0,4,0},{480,288,32,32,0,0,0,4,0},{480,320,32,32,0,0,0,4,0},{480,352,32,32,0,0,0,4,0},{480,384,32,32,0,0,0,4,0},{480,416,32,32,0,0,0,4,0},{480,448,32,32,0,0,0,4,0},{480,480,32,32,0,0,0,4,0},{480,512,32,32,0,0,0,4,0},{480,544,32,32,0,0,0,4,0},{512,0,32,32,0,0,0,4,0},{512,32,32,32,0,0,0,4,0},{512,64,32,32,0,0,0,4,0},{512,96,32,32,0,0,0,4,0},{512,128,32,32,0,0,0,4,0},{512,160,32,32,0,0,0,4,0},{512,192,32,32,0,0,0,4,0},{512,224,32,32,0,0,0,4,0},{512,256,32,32,0,0,0,4,0},{512,288,32,32,0,0,0,4,0},{512,320,32,32,0,0,0,4,0},{512,352,32,32,0,0,0,4,0},{512,384,32,32,0,0,0,4,0},{512,416,32,32,0,0,0,4,0},{512,448,32,32,0,0,0,4,0},{512,480,32,32,0,0,0,4,0},{512,512,32,32,0,0,0,4,0},{512,544,32,32,0,0,0,4,0},{544,0,32,32,0,0,0,4,0},{544,32,32,32,0,0,0,4,0},{544,64,32,32,0,0,0,4,0},{544,96,32,32,0,0,0,4,0},{544,128,32,32,0,0,0,4,0},{544,160,32,32,0,0,0,4,0},{544,192,32,32,0,0,0,4,0},{544,224,32,32,0,0,0,4,0},{544,256,32,32,0,0,0,4,0},{544,288,32,32,0,0,0,4,0},{544,320,32,32,0,0,0,4,0},{544,352,32,32,0,0,0,4,0},{544,384,32,32,0,0,0,4,0},{544,416,32,32,0,0,0,4,0},{544,448,32,32,0,0,0,4,0},{544,480,32,32,0,0,0,4,0},{544,512,32,32,0,0,0,4,0},{544,544,32,32,0,0,0,4,0},{160,96,32,32,14,0,0,4,0},{512,448,32,32,14,0,0,4,0},{128,448,32,32,14,0,0,4,0},{480,128,32,32,14,0,0,4,0},{224,224,32,32,14,0,0,4,0},{64,224,32,32,14,0,0,4,0},{192,384,32,32,14,0,0,4,0},{384,256,32,32,14,0,0,4,0},{320,32,32,32,14,0,0,4,0},{128,288,32,32,14,0,0,4,0},{352,384,32,32,14,0,0,4,0},{448,256,32,32,15,0,0,4,0},{128,160,32,32,15,0,0,4,0},{64,320,32,32,15,0,0,4,0},{224,512,32,32,15,0,0,4,0},{512,512,32,32,15,0,0,4,0},{480,320,32,32,15,0,0,4,0},{448,64,32,32,15,0,0,4,0},{32,160,32,32,13,0,0,4,0},{480,416,32,32,13,0,0,4,0},{512,192,32,32,13,0,0,4,0},{224,64,32,32,13,0,0,4,0},{64,64,32,32,13,0,0,4,0},{416,480,32,32,13,0,0,4,0},{512,32,32,32,13,0,0,4,0},{288,128,32,32,21,0,0,4,0},{320,128,32,32,22,0,0,4,0},{320,160,32,32,30,0,0,4,0},{288,160,32,32,29,0,0,4,0},{224,352,32,32,29,0,0,4,0},{256,352,32,32,30,0,0,4,0},{224,320,32,32,21,0,0,4,0},{256,320,32,32,22,0,0,4,0},};
 float[][] walls = new float[int(random(90)) ][4]; //creates random up to 90 walls
 ArrayList<bacteria> food = new ArrayList(); //start list of bacteria, called food
 PImage images;//really just one image, needs to be loaded in setup
 void init() {
   images = loadImage("m_sand.png"); //loads image
 }
 void generateMap() { //draws walls
   
   for (int i = 0; map.length > i; i++) {
      
      drawCostume(map[i][0],map[i][1],int(map[i][2]),int(map[i][4]) ); 
    }
    for (int j = 0; walls.length > j; j++) {
      noStroke();
      fill(250,0,0,50);
      rect(walls[j][0],walls[j][1],walls[j][2],walls[j][3]);
    }
 }
 void light() { //draws light
       float maxDist = dist(width/2,height/2,0,0);
     
    for (int i = 0; width*height/32  > i; i++) {
      int x = (i*32%width) ;
      int y = (int(i*32)/int(width) ) ;
      
      float tint = (dist(x,y,width/2,height/2) /maxDist )*30 ;//percentage of height
    
      noStroke();
     fill(0,0,0,tint);

     rect(x,y,32,32);
    
     
    }
   
      
   
 }
 void drawCostume(float x, float y, int size, int cost) {
 
   
   
    image(getImage(cost%8,cost/8),x,y,size,size);
    
    
  }
  PImage getImage(int numX, int numY) { 
    
    return images.get(numX * 32,numY*32,32,32);

  }
  void makeWalls() { // Algorithm to make walls
    
    for (int i = 0;walls.length > i; i++) {
      float[] val = {random(width),random(height),random(5,25),random(5,25)};
      walls[i] = val;
    }
  }
  void initFood() {//creates food
    //for each item, create food based on light
      float maxDist = dist(width/2,height/2,0,0); // amount of light max
    for (int i = 0; map.length > i; i++){
     
      if ( int(random(0,pow( (dist(map[i][0],map[i][1],width/2,height/2) /maxDist )*15,2.0))) == 0) { //Calculation of light
        fill(250,0,0);
        food.add(new bacteria(map[i][0],map[i][1]));
        
      }
    }
  }
  void showFood() { //how food is updated
    int offset = 0;
    for (int i = 0; food.size()-offset > i; i++) {
      bacteria cur = food.get(i);
      cur.update();
      if (cur.reproduce()) { //if ready to reproduce, release spore nearby
        food.add( new bacteria(food.get(i).x,cur.y));
        food.get(food.size() -1).acel = new PVector(random(-2,2),random(-2,2));
        cur.energy = 20;
      }
      if (cur.energy < 0) {
        food.remove(i);
        offset ++;
      }
     
    }
  }
  void INIT() {
    this.init();
    this.makeWalls();
    this.initFood();
  }
  void RUN() {
    this.generateMap();
    noStroke();
    fill(0,250,0);
    this.showFood();
    this.light();
   
    
  }
  void eatan(character Char) { //*important*
   
    for (int i = 0; food.size() > i; i++) { //eating the food
      bacteria cur = food.get(i);
      if (dist(Char.x,Char.y,cur.x,cur.y) < Char.size/2) { //bacteria is considered to be 0 pixels large
        food.get(i).energy -= 10;
        Char.energy += 10;
      }
    }
  }
  ArrayList<ArrayList<float[]>> infoSight(character cha) { //calculation of info for seeing
    float x = cha.x; 
    float y = cha.y;
    int size1 = cha.sightX/2; 
    int size2 = cha.sightY/2;
    ArrayList<ArrayList<float[]>> info = new ArrayList(); //ArrayList of float[]
     ArrayList<float[]> infoTemp = new ArrayList();
    for (int i =0; food.size() > i; i++){
      bacteria cur = food.get(i);
     
      if ( abs(x - cur.x) < size1 && abs(y-cur.y) < size2) {
        float[] b= {cur.x,cur.y,cur.energy}; // *form of info*  = x,y,energy  
        infoTemp.add(b);
      }
    }
    info.add(infoTemp);
    infoTemp = new ArrayList();
    for (int j = 0; walls.length > j; j++) {
      infoTemp.add(walls[j]);
    }
    info.add(infoTemp);
    return info;
  }
  void evolve(character Char, int choi) { //choices for evolving, not finished
    float[] evolveData = { 100,200,250,250,500}; //energy required + max energy
    if (Char.energy >= evolveData[Char.evolve]-1) {
      if (Char.evolve == 0) {
        if (choi == 0) {
          Char.maxSpeed *= 2;
        }
        if (choi == 1) {
          Char.size *= 2;
        }
        Char.energy = 50;
        Char.evolve ++;
        Char.maxEnergy = evolveData[Char.evolve];
      }
    }
  }
}
class bacteria { //class for bacteria
  float energy = 5;
  float x ;
  float y;
  int maxEnergy = 150;
  PVector acel = new PVector(0,0);
  bacteria(float x_, float y_) {
    x= x_;
    y = y_;
  }
  void update() {
    x += acel.x;
    y += acel.y;
    acel = acel.mult(.95); //slow down, friction amount
    energy += .5 - dist(x,y,width/2,height/2)/ (dist(0,0,width/2,height)); //grows in proportion to the light it has
    energy -= 0.1;//loses some energy by default 
    
  
    ellipse(x,y,energy/20,energy/20);
    if (energy > maxEnergy) {
      energy = maxEnergy;
     
    }
  }
  
  boolean reproduce() {
    if (energy == maxEnergy) {
      return true;
    }
    return false;
  }
  
}


class character {
  float x;
  float y;
  float size;
  float energy = 95;
  float maxEnergy = 100;
  int sightX = 155;
  int sightY = 155;
  int evolve = 0;
  float maxSpeed = 1;
  
  character (float x_, float y_, float size_) {
    x = x_;
    y = y_;
    size = size_;
  }
  void view() {
    sightX = int(120 - (dist(x,y,width/2,height/2)/(dist(0,0,width/2,height))  * 150) );
    
    sightY = sightX;
  }
  boolean evolveReady() {
    if (energy > maxEnergy) {
      return true;
    }
    return false;
  }
  void run() {
     rectMode(CENTER);
    noFill();
    stroke(0);
    rect(x,y,sightX,sightY);
     fill(0,energy*2.5,0);
     rectMode(CORNER);
    ellipse(x,y,size,size);
    energy -= 0.1;

    if (energy > maxEnergy) {
      energy = maxEnergy;
      
    }
    
    
  }
  boolean hit(map Map, float x, float y) {
    float[][] walls = Map.walls;
    for (int i = 0; walls.length > i; i++) {
        if ( abs(x-walls[i][0]) < size/2 + walls[i][2]/2 && abs(y-walls[i][1]) < size/2 + walls[i][3]/2) {
          return true;
        }
    }
    return false;
  }
  void move(map Map ,float ang, float speed_) {
    
     if (! hit(Map,x + sin(ang) * speed_, y + cos(ang) * speed_) && speed_ <= maxSpeed) {
     x += sin(ang) * speed_;
     y += cos(ang) * speed_;
     energy -= sqrt(speed_)/2;
     }
  }
  
}

map b= new map();
You tst ;

void setup() {
  size(576,576);
  b.INIT();
  tst = new You();


}
void draw() {
  background(255);
   
   b.RUN();
    tst.run(b);

   stroke(0,250,250);
   
   
   
 
}
